- name: Install Redis Cluster on EKS
  hosts: localhost
  tasks:
    - name: Add Bitnami Helm Repository
      command: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm Repository
      command: helm repo update

    - name: Create Namespace for Redis
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: redis
        state: present

    - name: Install Redis Cluster using Helm
      command: >
        helm install my-redis bitnami/redis -n redis \
          --set replica.replicaCount=3 \
          --set auth.enabled=false \
          --set volumePermissions.enabled=true \
          --set master.persistence.storageClass="gp2" \
          --set replica.persistence.storageClass="gp2" \
          --set sentinel.enabled=true
- name: Install Kafka Cluster on EKS
  hosts: localhost
  tasks:
    - name: Add Bitnami Helm Repository
      command: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm Repository
      command: helm repo update

    - name: Create Namespace for Kafka
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: kafka
        state: present

    - name: Install Kafka Cluster using Helm
      command: >
        helm install my-kafka -n kafka \
          --set volumePermissions.enabled=true \
          --set global.storageClass="gp2" \
          --set replicaCount=3 \
          --set service.type=ClusterIP \
          --set zookeeper.enabled=false \
          --set kraft.enabled=true \
          --set listeners.client.protocol=PLAINTEXT \
          oci://registry-1.docker.io/bitnamicharts/kafka
- name: Setup ALB Ingress on EKS with AWS Load Balancer Controller
  hosts: localhost
  gather_facts: false
  vars:
    aws_account_id: "396913715402"
    eks_cluster_name: "eks-ryu"
    aws_region: "ap-northeast-1"
    iam_assume_policy: >
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Federated": "arn:aws:iam::{{ aws_account_id }}:oidc-provider/{{ eks_oidc_provider }}"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
              "StringEquals": {
                "{{ eks_oidc_provider }}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
              }
            }
          }
        ]
      }
  tasks:
    - name: Retrieve EKS Cluster VPC ID
      ansible.builtin.command: >
        aws eks describe-cluster --name {{ eks_cluster_name }} --region {{ aws_region }} --query "cluster.resourcesVpcConfig.vpcId" --output text
      register: eks_vpc_cmd
      changed_when: false

    - name: Set eks_vpc_id fact
      set_fact:
        eks_vpc_id: "{{ eks_vpc_cmd.stdout }}"

    - name: Retrieve EKS OIDC provider
      ansible.builtin.command: >
        aws eks describe-cluster --name {{ eks_cluster_name }} --region {{ aws_region }} --query "cluster.identity.oidc.issuer" --output text
      register: eks_oidc_cmd
      changed_when: false

    - name: Set eks_oidc_provider fact
      set_fact:
        eks_oidc_provider: "{{ eks_oidc_cmd.stdout | regex_replace('^https://', '') }}"

    - name: Create IAM role for AWS Load Balancer Controller with managed policy attached
      amazon.aws.iam_role:
        name: "AWSLoadBalancerControllerIAMRole"
        state: present
        assume_role_policy_document: "{{ iam_assume_policy }}"
      register: lb_controller_role
    
    - name: Create IAM policy for AWS Load Balancer Controller
      amazon.aws.iam_policy:
        iam_type: "role"
        iam_name: "AWSLoadBalancerControllerIAMRole"
        policy_name: "AWSLoadBalancerControllerIAMPolicy"
        state: present
        policy_json: "{{ lookup('file', 'aws-load-balancer-controller-policy.json') }}"
      register: lb_controller_policy
    
    - name: Create service account for AWS Load Balancer Controller
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-load-balancer-controller
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: "{{ lb_controller_role.iam_role.arn }}"
    - name: Install AWS Load Balancer Controller via Helm
      ansible.builtin.shell: >
        helm repo add eks https://aws.github.io/eks-charts &&
        helm repo update &&
        helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName={{ eks_cluster_name }} \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region={{ aws_region }} \
          --set vpcId={{ eks_vpc_id }}
      environment:
        HELM_EXPERIMENTAL_OCI: "1"

- name: Install ArgoCD on EKS
  hosts: localhost
  tasks:
    - name: Add ArgoCD Helm Repository
      command: helm repo add argo https://argoproj.github.io/argo-helm

    - name: Update Helm Repository
      command: helm repo update

    - name: Create Namespace for ArgoCD
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: argocd
        state: present

    - name: Install ArgoCD using Helm
      command: >
        helm install argocd argo/argo-cd
        --namespace argocd
        --create-namespace
- name: Install Secrets Store CSI Driver and AWS Secrets Provider
  hosts: localhost
  tasks:
    - name: Add Helm repository for Secrets Store CSI Driver
      command: helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts

    - name: Add Helm repository for AWS Secrets Provider
      command: helm repo add aws-secrets-manager https://aws.github.io/secrets-store-csi-driver-provider-aws

    - name: Update Helm repositories
      command: helm repo update

    - name: Install or Upgrade Secrets Store CSI Driver with Secret Sync enabled
      command: >
        helm upgrade --install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --set secrets-store-csi-driver.syncSecret.enabled=true 

    - name: Install or Upgrade AWS Secrets Provider
      command: >
        helm upgrade --install -n kube-system secrets-provider-aws aws-secrets-manager/secrets-store-csi-driver-provider-aws
    
    - name: Apply RBAC for Secrets Store CSI Driver
      kubernetes.core.k8s:
        state: present
        src: ./rbac_secrets_store.yaml

